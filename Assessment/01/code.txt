import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, Dropout, BatchNormalization

df0 = pd.read_csv('/content/features_v1')
df0 = df0.rename(columns={'Unnamed: 0': 'id'})
target = pd.read_csv("/content/target")
target = target.rename(columns={'Unnamed: 0': 'id'})
target = target.rename(columns={'NObeyesdad': 'label'})
df = pd.merge(df0, target, on='id', how='left')

df_train = df.sample(n=int(0.7 * len(df)), random_state=0)
df = df.drop(df_train.index)

df_validation = df.sample(n=int(0.15 * len(df)), random_state=0)
df = df.drop(df_validation.index)

df_test = df

X_train = df_train.drop(['id', 'label'], axis=1)
y_train = df_train['label']
X_validation = df_validation.drop(['id', 'label'], axis=1)
y_validation = df_validation['label']
X_test = df_test.drop(['id', 'label'], axis=1)
y_test = df_test['label']

y_train_categorical = tf.keras.utils.to_categorical(y_train, num_classes=7)
y_validation_categorical = tf.keras.utils.to_categorical(y_validation, num_classes=7)
y_test_categorical = tf.keras.utils.to_categorical(y_test, num_classes=7)

input_shape = X_train.shape[1]

inputs = Input(shape=(input_shape,))

x = Dense(128, activation='tanh')(inputs)
x = BatchNormalization()(x)
x = Dropout(0.3)(x)

x = Dense(64, activation='tanh')(x)
x = BatchNormalization()(x)
x = Dropout(0.4)(x)

outputs = Dense(7, activation='softmax')(x)

model = Model(inputs=inputs, outputs=outputs)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train_categorical, epochs=32, batch_size=16, validation_data=(X_validation, y_validation_categorical), verbose=2, validation_split=0.15)

y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)

accuracy = accuracy_score(y_test, y_pred_classes)
precision = precision_score(y_test, y_pred_classes, average='weighted')
recall = recall_score(y_test, y_pred_classes, average='weighted')

conf_matrix = confusion_matrix(y_test, y_pred_classes)

plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=target['label'].unique(), yticklabels=target['label'].unique())
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
